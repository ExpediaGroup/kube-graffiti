// Code generated by "enumer -type=BooleanOperator -json -yaml"; DO NOT EDIT

package graffiti

import (
	"encoding/json"
	"fmt"
)

const _BooleanOperatorName = "ANDORXOR"

var _BooleanOperatorIndex = [...]uint8{0, 3, 5, 8}

func (i BooleanOperator) String() string {
	if i < 0 || i >= BooleanOperator(len(_BooleanOperatorIndex)-1) {
		return fmt.Sprintf("BooleanOperator(%d)", i)
	}
	return _BooleanOperatorName[_BooleanOperatorIndex[i]:_BooleanOperatorIndex[i+1]]
}

var _BooleanOperatorValues = []BooleanOperator{0, 1, 2}

var _BooleanOperatorNameToValueMap = map[string]BooleanOperator{
	_BooleanOperatorName[0:3]: 0,
	_BooleanOperatorName[3:5]: 1,
	_BooleanOperatorName[5:8]: 2,
}

// BooleanOperatorString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func BooleanOperatorString(s string) (BooleanOperator, error) {
	if val, ok := _BooleanOperatorNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to BooleanOperator values", s)
}

// BooleanOperatorValues returns all values of the enum
func BooleanOperatorValues() []BooleanOperator {
	return _BooleanOperatorValues
}

// IsABooleanOperator returns "true" if the value is listed in the enum definition. "false" otherwise
func (i BooleanOperator) IsABooleanOperator() bool {
	for _, v := range _BooleanOperatorValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for BooleanOperator
func (i BooleanOperator) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for BooleanOperator
func (i *BooleanOperator) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("BooleanOperator should be a string, got %s", data)
	}

	var err error
	*i, err = BooleanOperatorString(s)
	return err
}

// MarshalYAML implements a YAML Marshaler for BooleanOperator
func (i BooleanOperator) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for BooleanOperator
func (i *BooleanOperator) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = BooleanOperatorString(s)
	return err
}
