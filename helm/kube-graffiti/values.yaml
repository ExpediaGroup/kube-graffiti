# Default values for kube-graffiti.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# The number of instances of kube-graffiti pods to deploy
replicaCount: 1

# You can change the image (for testing)
image:
  repository: hotelsdotcom/kube-graffiti
  tag: 0.8.2
  pullPolicy: IfNotPresent

# nameOverride and fullnameOverride allow you to change the way that the chart/release name is generated
nameOverride: ""
fullnameOverride: ""

service:
  # name - override the default service name (if you do please make sure you also generate new certificates!)
  name: kube-graffiti
  port: 443
  type: ClusterIP

# Default resource size for the deployment/pod
resources:
  limits:
    cpu: 500m
    memory: 256Mi
  requests:
    cpu: 100m
    memory: 64Mi

# Use these settings to fine control the placement of the deployed pod
nodeSelector: {}
tolerations: []
affinity: {}

# We recommend that you configure kube-graffiti from the chart but you can alternatively point at an existing configmap which contains the kube-graffiti configuration
# in yaml format
configMapName: ""

#
# Webhook Server Configuration
#

# logLevel controls the verbosity of logging to the kube-graffiti pod log, can be "debug", "info", "warn", "error"
# default kube-graffiti configuration
logLevel: info

# checkExisting toggles the checking and mutation of existing objects that match the graffiti rules.
checkExisting: "true"

# healthChecker modifies the checking of kube-graffiti pod health and usually does not need to be modified
healthChecker:
  port: 8080
  path: /healthz

# The "server" settings control how the webhooks get registered and the ssl certificate security
server:
  port: 8443
  # Feel free to change the companyDomain to that of your organisation - used in the registration of a webook
  companyDomain: acme.org
  # NOTE: certificates are added as base64 encodings of their data (default cert assumes deployment to namespace 'kube-graffiti')
  caData: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN0RENDQVp3Q0NRQ3BZT0FzTWczZXB6QU5CZ2txaGtpRzl3MEJBUXNGQURBYk1Sa3dGd1lEVlFRRERCQnIKZFdKbExXZHlZV1ptYVhScExXTmhNQ0FYRFRFNE1Ea3hOekV6TVRNeU1sb1lEekl5T1RJd056QXlNVE14TXpJeQpXakFiTVJrd0Z3WURWUVFEREJCcmRXSmxMV2R5WVdabWFYUnBMV05oTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGCkFBT0NBUThBTUlJQkNnS0NBUUVBM2M3clhBQzIrY1pxQ1Q2Wkp3bFhpM05pSHM0VjM0cG5zZzFFYUJVckdGVjcKZlRrVXhRbnZtTnNBY1Nsb2U5aDlXc0dSOGRMRldNUTN1dW9QYUJzTzJaQXVlZDQ0UmYybW5vbS85VHdEZ2UrQQoxT1g0YlNwdGhUZVRzVVhqVDNxa2ZVUTN2Ty9FQmNzZTRHb01FdG9CdFNWNVg4WmI3VWt6ajgxY2xRWUNGcW1uCitzOG9qNUFpVHdCRHdqNzZsdEtLcnJFS2dsT1Y3Z3p2NzgxbmNXQmx2TTYxWkVUNm5zUXdqU1UrcndzTVNMQVkKVDBKbGo0Sm5EV0l6cHRXQ3ZGa3BNRWZYZy82bkc4cXRUT3lBSVNtOU1WYmNxZjhUZlRWbGR2cFE1N1I2ODA5YQpCdzVCeDN2MzIycTdHQWJGaTJWVGp2Y2hJT1Q2em9ZZlFNYVFOaXZUQXdJREFRQUJNQTBHQ1NxR1NJYjNEUUVCCkN3VUFBNElCQVFCV0lDRlpKMVN4N0F3enJZQ1A1cHNFb25XVkMrOVRWS2tPTWJIY3hvaGtpbUZYK2VYKzV0eGwKb2oxTkpEZU5VaEVJNjNoK1hBbG9FcHZhVkhzMWtsUGJXNGRub0JwdWpJUFAzcWNuK2t2TzRxbGsxRDQvcURxSApqQkxIUEsyUThqUFVWWjJJTlNhOWljQnZKWkM5SXJXSUNoUzcrZndUQzRiWDBRK0Z0bzQ2TFkwd1NwR2ZvUmVzClhtNmNKdURoZWQ0dTZVdVhsWng2cmJFTnBIR0VwVFI0STlqUDN0VUVKYjRLenQvc1licmxGZjh2QXBYYnprbi8KOXBqWVlGU2hsZUhuM3p3MTFKU1YyVGJXY2lhV2hGU2g5dnV0TEs3YnVJQzFta0t0RTFLV1hrT1Zrd0dlSlFvRQo0UEM3bDRuZ0FWalRoUVJkVU9nWmRiTWk3d2FPRjBiMgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  keyData: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBOGVycU0vZmZKdkh4UDJHV2VEY0V1dHZXR2tpeWhLNzlqd2pGRnVodGZIWkNySTlICjFkOCttdjVJSjVuaHUrWDRkUWxHc1VmZURLKy8zZm1vZWYwNUpYcXNwZ0h0Q0o1NnF5M0ZyUTEwcHRhWmVrNEsKWU5uOGRLTElmSThuZzMvU0NETGRiL1dPQ1lXdm9xZnAxRHFqT2NMS0J1Ym1XRThiQlNlblNwTmlNbmtSMVY4aQpveExMZ2pESE5maWhWMG0wdGk4UlFFOUQyelVQMzlWeFVTNmF6ZkthakFRV3YrUzBZb2l5RitGRHRWUTN2UGR0Cm50bDNuRTM0enJWSVNqM3E2MHdJWHpCL1JaRjQwcjFuNTA4dlFRRUp1U01Tc1EwdFZKMmFmOFB2WEdlaHFaMU8KczlOT2daY1l2V2NPOUNXSFVsT21zNGxMeEwxVm9vQlc4TTF1MFFJREFRQUJBb0lCQVFDMks0Y1hnVFdLZHpDSwo0T3JWTmVFYThRYUdIbTVIMmhwWVJtdGI5OFRTcjU4L29GbWc1UTZZMnBqdE1VUzZJTS83R2ZRZzlaUnhpenI1ClpkSUhvcmNRMFJNSG8zV2lRdXp1MEhZRi9aYjFONjYxV2VVWXo2MzdDc1hjZmxSc0FxbmZ3S1hkZEZUME9MWnMKenZNVy9OMERWdnFaUGZFQldQaG81bFprb3gyVUVQNkZpMnRLNUJGdVNLWUFkNHdRSFMzUTB6QVkzc3dXSk9OTQpCZHl5c3N5dmZXclU0eFR2RGFpVEdMZU4rZ2R2U0xTaFMydUJQdjBOeXhCN3ZRclVkRHI3eEczMGhQS1JESUZVCkhVQ3FBdG1BYmFmbGp1dTg1bXFoWm10Y2JURGkwRVVDTkg5dXBUa3lpVVcyMm9BS1J6UVVIMW5JRllJNnFXTDAKZFA2Tk1odVJBb0dCQVA2cUcxYm95aDJqelhucTdQdXcxaFJNZVdJZWhjS056V0tuK2JnNTFNOU9oWDVsQm5Bego5Z2FmZkF2WkJ0R1RGbkhPWm5HWE5MSlJET3A1dzNTQWNkd0pWMFFMcXNnK0cwZXVleGxQeERFVTNpeWtiQXZVClEveG1YZEl5UnBsTFJBN2pYV0JNQjZXZTdNcDNFdDhDbE9xSE1senVIUGh0OVhmN3M3WTlaN1lWQW9HQkFQTXYKc2ZNYnVJclU1bDBTaVh2YU9hU2FzWk4rV3drd3BEQ1QxQy93d1NLTGZIa2lOcmVqWHUzcU42b2drbUx3UFdrVwp5emxFbmorblpCR3NhU05lcHdkWWNCVGl3cmV3SGZWci95M0wyVzJIQkhWK2RhdUtWOFJ5N2pLRG5JRllSdmVwCkRZUjVaZC9zbTJBVkNhZ0FGK1Z2WjhqVkprNHBRT1lNK0NKRGhpRE5Bb0dBSy83RFBsNTFIRzNCLzhBQU5QTTEKNk1mVmFJZ1JYNjBUd0dsNGtNVWM2THVPQUduL2xMN0ZVQnVaV0lxanpPejJRYThBcjdzSmxZeS9DSHNFczBuRgpZZGdUUldRbW12VnZ6UkJ0bjgvUit4QzUyVWlHaWZ5ZnlpajlLR1ViSVR5SmczRHdIc1REeFc4UlJXRVExNG9nCm8rdTdYYWFkUnFYb2RGUDlsZ3hCc0lrQ2dZRUF5ZWltdWE4aGFIdGRqSmNRZVRsMXRKb1BwK000R0lnL09tbnkKdVo4TjYrMmQra0VTNXlPSWRNYUxVd0JhS2pWRzk1TEtScEVYUnNoblNGazZyZmd2ZStUTW9qcW42clVhR3FPQgpLZmZmWFpYRmVQdjNIT2J1K2hkbWQ2QllkL2ZnYkUzN0FDdC9EdzAyNys1bnB3bjB6VFRUR2FjSGQ4dStxNExICkhrT3NBRjBDZ1lFQTBqWVNFc3FRK1IxTjJLU0R4MGVhVmJySktmRFN5WEFndUg4YVQ5R3hsYU80THRuZ0VLUHUKTUtDNjBXcXphRG5RV0V1MGY4Qml1ZjNJZTNhWk1Ta2NOMjg0T2N5TnZNcURWeTFIbWFscy9pbE04NFkxR1MyRApXZkowbkJmOEdlbkdLcUN6SHlaSnJ3aHV1c3R1elNSM2EyVGFLU055bEdtQ1FaYkdFZVV6WTh3PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
  certData: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURBekNDQWV1Z0F3SUJBZ0lKQU1VdWNFalA0dFl4TUEwR0NTcUdTSWIzRFFFQkJRVUFNQnN4R1RBWEJnTlYKQkFNTUVHdDFZbVV0WjNKaFptWnBkR2t0WTJFd0lCY05NVGd3T1RFM01UTXhNekl6V2hnUE1qSTVNakEzTURJeApNekV6TWpOYU1Db3hLREFtQmdOVkJBTU1IMnQxWW1VdFozSmhabVpwZEdrdWEzVmlaUzFuY21GbVptbDBhUzV6CmRtTXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFEeDZ1b3o5OThtOGZFL1laWjQKTndTNjI5WWFTTEtFcnYyUENNVVc2RzE4ZGtLc2owZlYzejZhL2tnbm1lRzc1ZmgxQ1VheFI5NE1yNy9kK2FoNQovVGtsZXF5bUFlMElubnFyTGNXdERYU20xcGw2VGdwZzJmeDBvc2g4anllRGY5SUlNdDF2OVk0SmhhK2lwK25VCk9xTTV3c29HNXVaWVR4c0ZKNmRLazJJeWVSSFZYeUtqRXN1Q01NYzErS0ZYU2JTMkx4RkFUMFBiTlEvZjFYRlIKTHByTjhwcU1CQmEvNUxSaWlMSVg0VU8xVkRlODkyMmUyWGVjVGZqT3RVaEtQZXJyVEFoZk1IOUZrWGpTdldmbgpUeTlCQVFtNUl4S3hEUzFVblpwL3crOWNaNkdwblU2ejAwNkJseGk5Wnc3MEpZZFNVNmF6aVV2RXZWV2lnRmJ3CnpXN1JBZ01CQUFHak9UQTNNQWtHQTFVZEV3UUNNQUF3Q3dZRFZSMFBCQVFEQWdYZ01CMEdBMVVkSlFRV01CUUcKQ0NzR0FRVUZCd01DQmdnckJnRUZCUWNEQVRBTkJna3Foa2lHOXcwQkFRVUZBQU9DQVFFQWFzbXVIWkV5dllZRwpTUzJRc25lR1BqdjhYaUo1UFFlaHJ4NkdTRHB0NU1tMGdtZ0w5Z2dwdGtPSlB0UXNyWUlLc3E3dGg0MFVIY0xvCkpEWXhaRlVsV3JMM21Xenl1eDhpMWVQeDdRK0YyN3hHcGlCTjlRcGZnRTVqQjBOR3NYQkpOK3FpMUduY0xja3QKQ2hrRlMxTFVtbEdwRkFiMEhvLy84aW96M3p1RVdPb3REY1pBUjlNaCs1ZThZOHZNTWd2dzZjRWJXK0pjL05KbgpoS1huZU52RmtzLzRULy9vTXFmZjlVT3d3UURVYm9ySnZWeEVnUENoVHk1MXlVdEFhdHgwNWZtN0c3VG1sSDVyCjhWdEs3cjRUR0FIcXRaZ2szNlNqaUJLSGlBd2JhQm9OUzBoOUcwNmVHbnAyWHJqTUcxTmFYWVBJOW9VSHc2MVoKNExEbWpQY25Wdz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN0RENDQVp3Q0NRQ3BZT0FzTWczZXB6QU5CZ2txaGtpRzl3MEJBUXNGQURBYk1Sa3dGd1lEVlFRRERCQnIKZFdKbExXZHlZV1ptYVhScExXTmhNQ0FYRFRFNE1Ea3hOekV6TVRNeU1sb1lEekl5T1RJd056QXlNVE14TXpJeQpXakFiTVJrd0Z3WURWUVFEREJCcmRXSmxMV2R5WVdabWFYUnBMV05oTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGCkFBT0NBUThBTUlJQkNnS0NBUUVBM2M3clhBQzIrY1pxQ1Q2Wkp3bFhpM05pSHM0VjM0cG5zZzFFYUJVckdGVjcKZlRrVXhRbnZtTnNBY1Nsb2U5aDlXc0dSOGRMRldNUTN1dW9QYUJzTzJaQXVlZDQ0UmYybW5vbS85VHdEZ2UrQQoxT1g0YlNwdGhUZVRzVVhqVDNxa2ZVUTN2Ty9FQmNzZTRHb01FdG9CdFNWNVg4WmI3VWt6ajgxY2xRWUNGcW1uCitzOG9qNUFpVHdCRHdqNzZsdEtLcnJFS2dsT1Y3Z3p2NzgxbmNXQmx2TTYxWkVUNm5zUXdqU1UrcndzTVNMQVkKVDBKbGo0Sm5EV0l6cHRXQ3ZGa3BNRWZYZy82bkc4cXRUT3lBSVNtOU1WYmNxZjhUZlRWbGR2cFE1N1I2ODA5YQpCdzVCeDN2MzIycTdHQWJGaTJWVGp2Y2hJT1Q2em9ZZlFNYVFOaXZUQXdJREFRQUJNQTBHQ1NxR1NJYjNEUUVCCkN3VUFBNElCQVFCV0lDRlpKMVN4N0F3enJZQ1A1cHNFb25XVkMrOVRWS2tPTWJIY3hvaGtpbUZYK2VYKzV0eGwKb2oxTkpEZU5VaEVJNjNoK1hBbG9FcHZhVkhzMWtsUGJXNGRub0JwdWpJUFAzcWNuK2t2TzRxbGsxRDQvcURxSApqQkxIUEsyUThqUFVWWjJJTlNhOWljQnZKWkM5SXJXSUNoUzcrZndUQzRiWDBRK0Z0bzQ2TFkwd1NwR2ZvUmVzClhtNmNKdURoZWQ0dTZVdVhsWng2cmJFTnBIR0VwVFI0STlqUDN0VUVKYjRLenQvc1licmxGZjh2QXBYYnprbi8KOXBqWVlGU2hsZUhuM3p3MTFKU1YyVGJXY2lhV2hGU2g5dnV0TEs3YnVJQzFta0t0RTFLV1hrT1Zrd0dlSlFvRQo0UEM3bDRuZ0FWalRoUVJkVU9nWmRiTWk3d2FPRjBiMgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==

#
# Graffiti Rules
#

# rules - your kube-graffiti rules.  These get added to a configmap which is loaded into the kube-graffiti pod at startup.
rules:
# Each rule must have a registration section which targets which objects the kube-apisever will send to kube-graffiti
- registration:
    # every graffiti-rule must have a unique name!
    name: add-name-label-to-namespaces
    targets:
    - api-groups:
      - ""
      api-versions:
      - v1
      resources:
      - namespaces
    # Warning - setting failure-policy to 'Fail' will prevent targetted objects from being created/update if kube-graffiti is not running!
    failure-policy: Ignore
  # This example rule does not contain a 'matchers' section because the targets with the registration is sufficient in this case
  payload:
    # A payload can contain labels/annotations 'additions' and/or 'deletions', a 'block' or a 'json-patch'
    additions:
      labels:
        # An example of using templating within a label addition to pull the name from an objects metadata name
        name: '{{ index . "metadata.name" }}'